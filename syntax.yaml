# syntax help
# registers:    r0, r1, ... r7
# values (hex): #10, #0F, #123
# addr (hex):   $00, $FF

NOP:
  0x00: []

JUMP:
  0x01: ["addr"]

PUSH:
  0x02: ["reg"]

POP:
  0x03: ["reg"]

CLEAR:
  0x04: ["reg"] # set all bits to zero

INC:
  0x05: ["reg"] # increment register value

HALT:
  0x09: []

ADD:
  0x10: ["reg", "reg"] # do reg1 + reg2 and store the result in reg1
  0x11: ["reg", "val"] # do reg1 + value and store the result in reg1

MOV:
  0x20: ["reg", "reg"] # move reg2' value to reg1
  0x21: ["reg", "val"] # move value to reg1 immediately

LPM:  # load program memory
  0x22: ["reg", "addr"] # load ROM value at given addr to reg

# external memory
LOAD:
  0x30: ["reg", "addr"] # load register with a value stored at addr

STORE:
  0x40: ["addr", "reg"] # store reg's value at address

